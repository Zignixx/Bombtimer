<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSGSI</name>
    </assembly>
    <members>
        <member name="T:CSGSI.GameState">
            <summary>
            This object represents the entire game state 
            </summary>
        </member>
        <member name="M:CSGSI.GameState.#ctor(System.String)">
            <summary>
            Initialises a new GameState object using a JSON string
            </summary>
            <param name="JSONstring"></param>
        </member>
        <member name="M:CSGSI.GameState.HasRootNode(System.String)">
            <summary>
            Determines if the specified node exists in this GameState object 
            </summary>
            <param name="rootnode"></param>
            <returns>Returns true if the specified node exists, false otherwise</returns>
        </member>
        <member name="P:CSGSI.GameState.Provider">
            <summary>
            The "provider" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Map">
            <summary>
            The "map" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Round">
            <summary>
            The "round" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Player">
            <summary>
            The "player" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Auth">
            <summary>
            The "auth" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Added">
            <summary>
            The "added" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.Previously">
            <summary>
            The "previously" subnode
            </summary>
        </member>
        <member name="P:CSGSI.GameState.JSON">
            <summary>
            The JSON string that was used to generate this object
            </summary>
        </member>
        <member name="T:CSGSI.GameStateNode">
            <summary>
            A sub node of a GameState object
            </summary>
        </member>
        <member name="M:CSGSI.GameStateNode.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new GameStateNode using a JToken object
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:CSGSI.GameStateNode.GetValue(System.String)">
            <summary>
            Get the value of a specific subnode of this GameStateNode
            </summary>
            <param name="node">The name of the subnode to get the value of</param>
            <returns>The string value of the specified subnode</returns>
        </member>
        <member name="M:CSGSI.GameStateNode.GetNode(System.String)">
            <summary>
            Get a specific subnode as a new GameStateNode
            </summary>
            <param name="node">The name of the subnode</param>
            <returns>A new GameStateNode object containing the subnode</returns>
        </member>
        <member name="M:CSGSI.GameStateNode.Empty">
            <summary>
            An empty GameStateNode to substitute for a null value
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSGSI.GameStateNode.Item(System.String)">
            <summary>
            Get a specific subnode as a new GameStateNode
            </summary>
            <param name="node">The name of the subnode to get the value of</param>
            <returns>A new GameStateNode object containing the subnode</returns>
        </member>
        <member name="T:CSGSI.GSIListener">
            <summary>
            A class that listens for HTTP POST requests and keeps track of previous game states
            </summary>
        </member>
        <member name="M:CSGSI.GSIListener.Start(System.Int32)">
            <summary>
            Starts listening for HTTP POST requests on the specified port<para />
            !!! Fails if the application is started without administrator privileges !!!
            </summary>
            <param name="port">The port to listen on</param>
            <returns>Returns true if the listener could be started, false otherwise</returns>
        </member>
        <member name="M:CSGSI.GSIListener.Stop">
            <summary>
            Stops listening for HTTP POST requests
            </summary>
        </member>
        <member name="P:CSGSI.GSIListener.CurrentGameState">
            <summary>
            The most recently received GameState object
            </summary>
        </member>
        <member name="P:CSGSI.GSIListener.Port">
            <summary>
            Gets the port that is currently listening
            </summary>
        </member>
        <member name="P:CSGSI.GSIListener.Running">
            <summary>
            Gets a bool determining if the listening process is running
            </summary>
        </member>
        <member name="E:CSGSI.GSIListener.NewGameState">
            <summary>
            Occurs after a new GameState has been received
            </summary>
        </member>
    </members>
</doc>
